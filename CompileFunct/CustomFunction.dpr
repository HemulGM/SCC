library CustomFunction;

uses SysUtils, Classes, Math;

{
Не большая справка по языку

 Примеры:
 **********************
 function funct(x:Extended):Extended; stdcall;
 begin
  Result:=Sin(x);
 end;
 **********************
 Тригонометрические функции
 Cos(x) - Косинус
 Sin(x) - Синус
 Tan(x) - Тангенс
 Cotan(x) - Катангенс
 ArcCot(x) - Арккотангенс
 Cosecant(x) - Косеканс
 Secant(x) - Секанс
 **********************
 Floor(x) - Лесница
 Exp(x) - Экспанента
 Power(x) - Возведение в степень
 Abs(x) - Модульные скобки
 Round(x) - Округление
 Trunc(x) - Отбросить дробную часть
 Inc(x) - Увеличить x на 1
 Inc(x, n) - Увеличить x на n
 Dec(x) - Уменьшить x на 1
 Dec(x, n) - Уменьшить x на n
 Sqr(x) - Квадрат x
 Sqrt(x) - Корень числа x
 **********************
 Пример функции: Квадратное уравнение

 function funct(x:Extended):Extended; stdcall;
 begin
  //2x^2+3x+6 -- Два x в квадрате, плюс три x, плюс шесть
  Result:=(2*Power(x, 2))+(3*x)+6;
 end;
 
 Операторы:
  := - Присвоить
  + - Сложить   (X+1)
  - - Вычесть   (X-1)
  * - Умножить  (X*2)
  / - Разделить (X/2)
 Условная конструкция: if then else (если, то, в противном случае) 
 Например: 
  if x = 2 then x:=x+3; (если x равен 2, то увеличиваем x на 3)
  if x = 2 then x:=x+3 else x:=x-2; (если x равен 2, то увеличиваем x на 3, в противном случае уменьшаем x на 2)
  if (x < 2) or (x = 3) then Dec(x, 3.4); (если x меньше 2 или x равен 3, то уменьшаем x на 3.4)
  
  or - Логическое "ИЛИ" 
  and - Логическое "И"
  not - Логическое "НЕ"
  mod - остаток от деления
  div - деление нацело
  < - меньше
  > - больше
  = - равно
  <> - неравно
  <= - меньше либо равно
  >= - больше либо равно

  Это, есть максимально урезанный набор знаний для построения функции в Delphi.
}

//Имя функции (не обязательно, но рекомендуется)
const FunctName = 'Sin(x)*(x+2)+6';


function funct(x:Extended):Extended; stdcall;
begin
 //Укажите алгебраическое выражение, необходимой функции,
 //используя стандартные функции и процедуры языка Pascal - Delphi
 //Не забудьте вернуть результат: присвоить Result результат вашей функции.
 //Result:=Power(x, 2);
 //Result:=Sqrt(x);
 Result:=sin(Power(x, 3));
end;

function get_name():PChar; stdcall;
begin
 Result:=FunctName;
end;

exports funct, get_name;

begin

end.
